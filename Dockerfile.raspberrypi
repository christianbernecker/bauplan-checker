# Multi-stage Build f端r Raspberry Pi
FROM python:3.11-slim-bullseye as backend-builder

# System-Dependencies f端r OCR und PDF-Verarbeitung
RUN apt-get update && apt-get install -y \
    tesseract-ocr \
    tesseract-ocr-deu \
    tesseract-ocr-eng \
    poppler-utils \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgomp1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Python Dependencies
WORKDIR /app
COPY backend/requirements.txt .

# Optimierte Installation f端r ARM64
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Backend Code kopieren
COPY backend/ ./backend/

# Frontend Build Stage
FROM node:18-alpine as frontend-builder

WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci --only=production

COPY frontend/ ./
RUN npm run build

# Production Stage
FROM python:3.11-slim-bullseye

# Runtime Dependencies
RUN apt-get update && apt-get install -y \
    tesseract-ocr \
    tesseract-ocr-deu \
    tesseract-ocr-eng \
    poppler-utils \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libgomp1 \
    curl \
    nginx \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Node.js f端r Frontend installieren
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs

WORKDIR /app

# Python Dependencies vom Builder kopieren
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Backend Code kopieren
COPY --from=backend-builder /app/backend ./backend

# Frontend Build kopieren
COPY --from=frontend-builder /app/frontend/.next ./frontend/.next
COPY --from=frontend-builder /app/frontend/public ./frontend/public
COPY --from=frontend-builder /app/frontend/package*.json ./frontend/
COPY --from=frontend-builder /app/frontend/next.config.ts ./frontend/

# Frontend Dependencies installieren
WORKDIR /app/frontend
RUN npm ci --only=production

WORKDIR /app

# Verzeichnisse erstellen
RUN mkdir -p \
    /app/backend/uploads \
    /app/backend/din_norms \
    /app/backend/analysis_results \
    /app/backend/system_prompts \
    /app/logs \
    /var/log/supervisor

# Startup Script erstellen
COPY start-services.sh /app/start-services.sh
RUN chmod +x /app/start-services.sh

# Supervisor Konfiguration
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Expose Ports
EXPOSE 8000 3000

# Health Check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health && curl -f http://localhost:3000 || exit 1

# Start Services
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 