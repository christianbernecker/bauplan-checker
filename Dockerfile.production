# Production Dockerfile f√ºr Bauplan-Checker
# Saubere Multi-Stage Build ohne Verwirrung

# Frontend Build Stage
FROM node:18-alpine AS frontend-builder
WORKDIR /build

# Install build dependencies for Alpine
RUN apk add --no-cache python3 make g++

# Copy entire frontend directory (ensures all files are available)
COPY frontend/ ./

# Install dependencies
RUN npm install --verbose

# Build the application
RUN npm run build

# Backend Dependencies Stage  
FROM python:3.11-alpine AS backend-builder
WORKDIR /build
# Kopiere NUR die Backend requirements aus dem Root-Verzeichnis
COPY backend/requirements.txt ./
RUN apk add --no-cache gcc musl-dev python3-dev linux-headers && \
    pip install --no-cache-dir -r requirements.txt

# Final Production Image
FROM python:3.11-alpine
WORKDIR /app

# System Dependencies
RUN apk add --no-cache \
    tesseract-ocr \
    tesseract-ocr-data-deu \
    tesseract-ocr-data-eng \
    poppler-utils \
    nodejs \
    npm \
    curl \
    bash

# Copy Python Dependencies
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Copy Backend (NUR aus Root backend/)
COPY backend/main.py ./
COPY backend/din_processor.py ./
COPY backend/technical_drawing_processor.py ./
COPY backend/requirements.txt ./
COPY backend/system_prompts/ ./system_prompts/

# Copy Frontend Build
COPY --from=frontend-builder /build/.next ./frontend/.next
COPY --from=frontend-builder /build/package*.json ./frontend/
COPY --from=frontend-builder /build/node_modules ./frontend/node_modules
COPY --from=frontend-builder /build/public ./frontend/public
COPY --from=frontend-builder /build/next.config.ts ./frontend/

# Create Required Directories
RUN mkdir -p uploads din_norms analysis_results && \
    chmod -R 755 /app

# Environment
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV NODE_ENV=production

# Health Check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Ports
EXPOSE 3000 8000

# Copy and Setup Start Script
COPY start.sh /start.sh
RUN chmod +x /start.sh

CMD ["/start.sh"] 