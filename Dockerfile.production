# Multi-stage build for production
FROM node:18-alpine AS frontend-builder

# Set working directory
WORKDIR /app

# Copy everything (let dockerignore handle exclusions)
COPY . .

# Build frontend
WORKDIR /app/frontend
RUN npm ci && npm run build

# Backend builder stage
FROM python:3.11-alpine AS backend-builder

WORKDIR /app
COPY backend/requirements.txt ./
RUN apk add --no-cache gcc musl-dev python3-dev linux-headers && \
    pip3 install --no-cache-dir -r requirements.txt

# Final production image
FROM python:3.11-alpine

# Install system dependencies
RUN apk add --no-cache \
    tesseract-ocr \
    tesseract-ocr-data-deu \
    tesseract-ocr-data-eng \
    poppler-utils \
    nodejs \
    npm \
    curl \
    bash

WORKDIR /app

# Copy Python dependencies
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Copy backend
COPY backend/ ./

# Copy frontend build
COPY --from=frontend-builder /app/frontend/.next ./frontend/.next
COPY --from=frontend-builder /app/frontend/package*.json ./frontend/
COPY --from=frontend-builder /app/frontend/node_modules ./frontend/node_modules
COPY --from=frontend-builder /app/frontend/public ./frontend/public
COPY --from=frontend-builder /app/frontend/next.config.ts ./frontend/

# Create directories
RUN mkdir -p uploads din_norms analysis_results system_prompts && \
    chmod -R 755 /app

# Environment
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Ports
EXPOSE 3000 8000

# Start script
COPY start.sh /start.sh
RUN chmod +x /start.sh

CMD ["/start.sh"] 