# Production Dockerfile f체r Bauplan-Checker
# Vereinfacht und optimiert f체r schnelle, zuverl채ssige Builds

# Frontend Build Stage
FROM node:18-alpine AS frontend-builder
WORKDIR /build

# Install basic build dependencies
RUN apk add --no-cache python3 make g++

# Copy frontend and build
COPY frontend/ ./
RUN npm install && npm run build

# Backend Stage - Verwende Python mit vorinstallierten wissenschaftlichen Bibliotheken
FROM python:3.11-slim AS backend-builder
WORKDIR /build

# Minimale Build-Dependencies installieren
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    pkg-config \
    libffi-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Requirements kopieren und installieren
COPY backend/requirements.txt ./
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --prefer-binary -r requirements.txt

# Final Production Image
FROM python:3.11-slim
WORKDIR /app

# Nur Runtime-Dependencies installieren
RUN apt-get update && apt-get install -y \
    curl \
    bash \
    poppler-utils \
    tesseract-ocr \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Node.js f체r Frontend installieren
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get update && apt-get install -y nodejs && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Python Dependencies kopieren
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Backend Dateien kopieren
COPY backend/main.py ./
COPY backend/din_processor.py ./
COPY backend/technical_drawing_processor.py ./
COPY backend/requirements.txt ./
COPY backend/system_prompts/ ./system_prompts/

# Frontend Build kopieren
COPY --from=frontend-builder /build/.next ./frontend/.next
COPY --from=frontend-builder /build/package*.json ./frontend/
COPY --from=frontend-builder /build/node_modules ./frontend/node_modules
COPY --from=frontend-builder /build/public ./frontend/public
COPY --from=frontend-builder /build/next.config.ts ./frontend/

# Verzeichnisse erstellen
RUN mkdir -p uploads din_norms analysis_results && \
    chmod -R 755 /app

# Umgebungsvariablen
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV NODE_ENV=production

# Health Check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

# Ports
EXPOSE 3000 8000

# Start Script
COPY start.sh /start.sh
RUN chmod +x /start.sh

CMD ["/start.sh"] 